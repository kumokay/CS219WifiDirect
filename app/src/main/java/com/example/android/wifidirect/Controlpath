/*
 * Controlpath main task is listening msg from other peer and responsing with a "ack" msg.
 * Controlpath keeps a local copy in hash table of all IP addr got from SYN MGE sent by group owner.
 */

public class Controlpath implements Runnable {
    //public static final String TAG = Controlpath.class.getName();
    private final static int HELLO = 0;
    private final static int PORT = 1;
    private final static int OK = 2;
    private final static int OTHER = 3;
    private boolean isOwner;
    private boolean isRunning = false;
    private String OwnerIP = null;
    private String myIP = null;
    private Thread thread = null;
    private int retrynum = 10 ;
    private HashSet<String> peerIP = new HashSet<String>();
    private ServerSocket serverSocket = null;

    public Controlpath(boolean isOwner,String IP){
        this.isOwner = isOwner;
        OwnerIP = IP;
    }

    public void start(){
        thread = new Thread(this);
        thread.start();
        isRunning = true;
    }
    public boolean isRunning(){return isRunning;}



    /*
     * if this device is not group owner, then send greeting msg to owner to let it know my IP address
     */
    public boolean init() throws IOException{
        BufferedReader Reader;
        BufferedWriter Writer;
        Socket socket =null;
        if (!isOwner) {
            try {
                Log.d(WiFiDirectActivity.TAG, "enter init");
                Thread.sleep(400);
                socket = new Socket(OwnerIP, 9000);
                Log.d(WiFiDirectActivity.TAG, "Opening control socket - ");
                socket.setSoTimeout(5000);
                Log.d(WiFiDirectActivity.TAG, "Connection control socket");
                Reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                myIP = socket.getLocalAddress().toString().substring(1);
                Writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                Writer.write("Hello:" + OwnerIP + '\n');  //Greeting formate : Hello:(ID addr)
                Writer.flush();
                String line = Reader.readLine();
                Log.d(WiFiDirectActivity.TAG,line);
                Log.d(WiFiDirectActivity.TAG, "get from local method: " + myIP);
                Writer.close();
                Reader.close();
                socket.close();
                Log.d(WiFiDirectActivity.TAG, "socket closes");
                peerIP.add(OwnerIP);
            } catch (InterruptedException e) {
                Log.e(WiFiDirectActivity.TAG, e.getMessage());
            }
        }
        else{
            myIP = OwnerIP;
        }
        handle.obtainMessage(MSG_IP,myIP).sendToTarget();
        return true;
    }
    @Override
    public void run()  {
        Log.d(WiFiDirectActivity.TAG, " controlling thread is running");
        try {
            this.init();
        }catch (IOException e){
            Log.d(WiFiDirectActivity.TAG,"Init failed, try again");
            run();
        }
        try{
            serverSocket = new ServerSocket(9000);
            while(isRunning){
                Socket socket = serverSocket.accept();
                String connectIP = socket.getRemoteSocketAddress().toString();
                new Thread(new Listenthread(socket,connectIP)).start();
            }
            serverSocket.close();
            Log.d(WiFiDirectActivity.TAG,"9000 port has been terminated");

        }catch (IOException e){
            Log.e(WiFiDirectActivity.TAG, "controlpath:" + e.getMessage());
            Log.d(WiFiDirectActivity.TAG, "accepting error");
            if(serverSocket!=null)
                try {
                    serverSocket.close();
                }catch (IOException error){
                    Log.e(WiFiDirectActivity.TAG, e.getMessage() + "serversocket");
                }

        }
    }

    public void stop() {
        isRunning = false;
        try {
            serverSocket.close();
        }catch (IOException e){
            Log.d(WiFiDirectActivity.TAG,e.getMessage());
        }
        if (thread == null) {
            Log.e(WiFiDirectActivity.TAG , "Control was stopped without being started.");
            return;
        }
        peerIP.clear();
        OwnerIP = null;
        myIP = null;
        Log.e(WiFiDirectActivity.TAG, "Stopping Controlling.");
        thread.interrupt();
        thread = null;
        controlpath = null;
    }

    /*
     *Processing msg received from other peer and response to that.
     */
    public int ProcessRequest(String msg,BufferedWriter out){
        if(msg.contains("Hello:")) {                                                            //peer->owner greeting msg
            Log.d(WiFiDirectActivity.TAG,"Received greeting msg from peer");
            return HELLO;
        }
        else if(msg.contains("PORT:")) {                                                        //server -> client Sending http server's PORT number. server doesn't has to be owner, clients are all device except itself
            String url = msg.substring(msg.indexOf("http://"));
            Log.d(WiFiDirectActivity.TAG, "get http url from one peer in group: "+url);
            handle.obtainMessage(ACTIVE, url).sendToTarget();
            try {
                out.write("PORT OK");
                Log.d(WiFiDirectActivity.TAG, "Reply to server");
                out.flush();
            } catch (IOException e) {
                Log.e(WiFiDirectActivity.TAG, e.getMessage());
            }
            return OTHER;
        }
        else if(msg.contains("CUT:")){                                                          //server -> client Notifying other clients that the https server is no longer exists.
            Log.d(WiFiDirectActivity.TAG,"Server wanna shut down server");
            return OTHER;
        }
        else if(msg.contains("GOODBYE:")){
            String cancelIP = msg.substring(msg.indexOf(':')+1);
            try{
                out.write("PORT OK");
                Log.d(WiFiDirectActivity.TAG,cancelIP+"won't make request on this server");
                out.flush();
            }catch (IOException e){
                Log.e(WiFiDirectActivity.TAG,e.getMessage());
            }
            handle.sendEmptyMessage(MSG_BYE);
            return OTHER;
        }
        else if(msg.contains("PORT OK")){                                                       //PORT OK: sck msg. Every msg need a response msg, or application would freeze.
            handle.sendEmptyMessage(MSG_PORT);
            Log.d(WiFiDirectActivity.TAG,"receive OK ack");
            return OK;
        }
        else if(msg.contains("SYN")){                                                           //SYN:     peer <-owner   msg contains all peers' address in one group.
            msg = msg.substring(msg.indexOf(':')+1);
            Log.d(WiFiDirectActivity.TAG,"synchronize IP set from owner "+msg);
            String IPs[] = msg.split("/");
            for(int i = 0 ; i < IPs.length ;++i){
                if(myIP.compareTo(IPs[i])==0)
                    continue;
                else if(IPs[i]!=""){
                    Log.d(WiFiDirectActivity.TAG,"Here "+IPs[i]);
                    peerIP.add(IPs[i]);
                }
            }
            try{
                out.write("PORT OK");
                Log.d(WiFiDirectActivity.TAG,"Reply to server");
                out.flush();
            }catch (IOException e){
                Log.e(WiFiDirectActivity.TAG,e.getMessage());
            }
        }
        else if(msg.contains("DOWNLOAD"))                                                       //DOWNLOAD: client -> server  requesting file transfer service
        {
            // send data ####### ADD IN CONTROL PATH
            String peer_ip = msg.substring(msg.indexOf("192"), msg.indexOf(":",12));
            int peer_port = Integer.parseInt(msg.substring(msg.indexOf(":",12) + 1));

            Intent serviceIntent = new Intent(getActivity(), FileTransferService.class);
            serviceIntent.setAction(FileTransferService.ACTION_SEND_FILE);
            serviceIntent.putExtra(FileTransferService.EXTRAS_FILE_PATH, server_file_uri);
            // target address
            serviceIntent.putExtra(FileTransferService.EXTRAS_GROUP_OWNER_ADDRESS, peer_ip);
            serviceIntent.putExtra(FileTransferService.EXTRAS_GROUP_OWNER_PORT, peer_port);
            getActivity().startService(serviceIntent);
            try{
                out.write("PORT OK");
                Log.d(WiFiDirectActivity.TAG,"Reply to server");
                out.flush();
            }catch (IOException e){
                Log.e(WiFiDirectActivity.TAG,e.getMessage());
            }
        }
        return OTHER;
    }

    public void sendIP(){
        Log.d(WiFiDirectActivity.TAG,"Syn IP set");
        String IPset = "";
        for(Iterator it = peerIP.iterator();it.hasNext();){
            IPset += it.next().toString()+'/';
        }
        Log.d(WiFiDirectActivity.TAG,IPset);
        for(Iterator it = peerIP.iterator(); it.hasNext();){
            Sendthread sendthread = new Sendthread(it.next().toString(),9000,"SYN:"+IPset);
            sendthread.start();
        }

    }
    public void sendPort(String httpuri){

        Log.d(WiFiDirectActivity.TAG, httpuri);
        int time = 0;
        for(Iterator it = peerIP.iterator();it.hasNext();)
        {
            Sendthread msendthread = new Sendthread(it.next().toString(), 9000,"PORT:"+httpuri);
            msendthread.start();
        }
    }

    public void sendDonwloadRequest(String server_ip, String client_ip, int client_dl_port)
    {
        Log.d(WiFiDirectActivity.TAG, "client" + client_ip + "downloadFile from server" + server_ip);
        Sendthread msendthread = new Sendthread(server_ip, 9000,"DOWNLOAD:"+client_ip+":"+client_dl_port);
        msendthread.start();
    }

    public void sendGoodBye(){
        if(currentplayingIP!=null){
            Sendthread msendthread = new Sendthread(currentplayingIP, 9000,"GOODBYE:"+myIP);
            Log.d(WiFiDirectActivity.TAG, "GOODBYE"+myIP);
            msendthread.start();
            currentplayingIP = null;
        }

    }

    public class Listenthread implements Runnable{
        private Socket socket = null;
        public boolean isRunning = false;
        public String connectIP = null;

        public Listenthread(Socket socket,String connectIP){
            this.socket = socket;
            this.connectIP = connectIP;
        }
        @Override
        public void run(){
            String content = null;
            BufferedReader Reader;
            BufferedWriter Writer;
            try {
                Reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                Writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
                String IP = socket.getRemoteSocketAddress().toString();
                IP = IP.substring(IP.indexOf('/')+1,IP.indexOf(':'));
                Log.d(WiFiDirectActivity.TAG, IP);
                peerIP.add(IP);
                content = Reader.readLine();
                Log.d(WiFiDirectActivity.TAG, "Here is the msg: " + content);
                int response = ProcessRequest(content,Writer);
                if(response == HELLO) {
                    Writer.write("Hello:" + IP + "\n");
                    Log.d(WiFiDirectActivity.TAG,"Hello:" + IP + "\n");
                    Writer.flush();
                }
                while(!socket.isClosed()) {
                    Writer.close();
                    Reader.close();
                    socket.close();
                    Log.d(WiFiDirectActivity.TAG,"socket closes");
                }
                if(response==HELLO&&peerIP.size()>1&&info.isGroupOwner)
                {
                    Log.d(WiFiDirectActivity.TAG,"might be here");
                    sendIP();
                }
            }catch (IOException e){
                Log.e(WiFiDirectActivity.TAG,e.getMessage());
            }
        }
    }

}